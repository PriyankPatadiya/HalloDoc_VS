@model DAL.ViewModels.AdminMainPageVM

@{
    Layout = "~/Views/Shared/_LayoutAdminDash.cshtml";
}


<body class="">
    <!-- Button trigger modal -->
  @*  <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
        Launch static backdrop modal
    </button>*@

    <!-- Modal -->
    
    <div class="tab-content" id="MainPagePartialDiv">
        @switch (Model.PageName)
        {
            case DAL.ViewModels.PageName.Dashboard:
                <partial name="AdminDashboardPage" model="Model.DashboardVM" />
                break;
            case DAL.ViewModels.PageName.ViewCaseForm:
                <partial name="ViewCaseAdmin" model="Model.Casemodel" />
                break;
            case DAL.ViewModels.PageName.ViewNotes:
                <partial name="ViewNotesAdmin" model="Model.NotesVM "/>
                break;
            case DAL.ViewModels.PageName.viewdocument:
                <partial name="ViewDocuments" model="Model.DocumentVM"></partial>
                break;
            case DAL.ViewModels.PageName.SendOrder:
                <partial name="SendOrder" model="Model.SendOrderVM"></partial>
                break;
            case DAL.ViewModels.PageName.CloseCase:
                <partial name="CloseCase" model="Model.closecase"></partial>
                break;
            case DAL.ViewModels.PageName.Encounterform:
                <partial name="EncounterForm" model="Model.encountermodel"></partial>
                break;
        }

    </div>
</body>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
<script>
    if ('@TempData["Message"]' != '') {
        showToast('@TempData["Message"]', '@TempData["MessageType"]');
        '@TempData.Remove("Message")'
    }
    function showToast(message, messageType) {
        const Toast = Swal.mixin({
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.onmouseenter = Swal.stopTimer;
                toast.onmouseleave = Swal.resumeTimer;
            }
        });

        let icon = "info";
        if (messageType === "success") {
            icon = "success";
        } else if (messageType === "error") {
            icon = "error";
        } else if (messageType === "warning") {
            icon = "warning";
        }

        Toast.fire({
            icon: icon,
            title: message
        });
    }
    
</script>